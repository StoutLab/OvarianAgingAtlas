Replication Code

#Load packages
library(SoupX)
library(Seurat)
library(SeuratWrappers)
library(scCustomize)
library(ShinyCell)
library(CellChat)

setwd("Z:")
ids <- read.csv("Stout/samples.txt", header=FALSE)

#Run SoupX decontamination pipeline to remove ambient RNA (Young et al., 2020)
sc1=load10X("Stout/scRNA/1/outs/")
sc2=load10X("Stout/scRNA/2/outs/")
sc3=load10X("Stout/scRNA/3/outs/")
sc4=load10X("Stout/scRNA/4/outs/")
sc5=load10X("Stout/scRNA/5/outs/")
sc6=load10X("Stout/scRNA/6/outs/")
sc7=load10X("Stout/scRNA/7/outs/")
sc8=load10X("Stout/scRNA/8/outs/")

sc1=autoEstCont(sc1)
sc2=autoEstCont(sc2)
sc3=autoEstCont(sc3)
sc4=autoEstCont(sc4)
sc5=autoEstCont(sc5)
sc6=autoEstCont(sc6)
sc7=autoEstCont(sc7)
sc8=autoEstCont(sc8)

out1=adjustCounts(sc1)
out2=adjustCounts(sc2)
out3=adjustCounts(sc3)
out4=adjustCounts(sc4)
out5=adjustCounts(sc5)
out6=adjustCounts(sc6)
out7=adjustCounts(sc7)
out8=adjustCounts(sc8)

#Create Seurat objects from SoupX output above
scrna.list = list()
scrna.list[[1]] = CreateSeuratObject(counts = out1, min.cells=10, min.features=100, project="1");
scrna.list[[2]] = CreateSeuratObject(counts = out2, min.cells=10, min.features=100, project="2");
scrna.list[[3]] = CreateSeuratObject(counts = out3, min.cells=10, min.features=100, project="3");
scrna.list[[4]] = CreateSeuratObject(counts = out4, min.cells=10, min.features=100, project="4");
scrna.list[[5]] = CreateSeuratObject(counts = out5, min.cells=10, min.features=100, project="5");
scrna.list[[6]] = CreateSeuratObject(counts = out6, min.cells=10, min.features=100, project="6");
scrna.list[[7]] = CreateSeuratObject(counts = out7, min.cells=10, min.features=100, project="7");
scrna.list[[8]] = CreateSeuratObject(counts = out8, min.cells=10, min.features=100, project="8");

#Merge into a single Seurat object
experiment.aggregate <- merge(x=scrna.list[[1]], y=c(scrna.list[[2]],
scrna.list[[3]],scrna.list[[4]], scrna.list[[5]],scrna.list[[6]],
scrna.list[[7]],scrna.list[[8]]), 
add.cell.ids = c(ids[1,1],ids[2,1],
ids[3,1],ids[4,1],ids[5,1],ids[6,1],
ids[7,1],ids[8,1]), project="ovary")

#Annotate mitochondrial genes
mito.genes <- grep("^mt-", rownames(experiment.aggregate@assays[["RNA"]]@data), value = T)

#Calulate the percent mitochondrial transcripts for each cell
percent.mito <- Matrix::colSums(experiment.aggregate@assays[["RNA"]]@data[mito.genes, ])/Matrix::colSums(experiment.aggregate@assays[["RNA"]]@data)

#Add the percent mitochondrial transcripts as meta-data in Seurat object
experiment.aggregate <- AddMetaData(
  object = experiment.aggregate,
  metadata = percent.mito,
  col.name= "percent.mito")

#Annotate ribosomal genes
experiment.aggregate <- PercentageFeatureSet(experiment.aggregate, "^Rp[sl]", col.name = "percent_ribo")

#Annotate hemoglobin genes
experiment.aggregate <- PercentageFeatureSet(experiment.aggregate, "^Hb[^(p)]", col.name = "percent_hb")
experiment.aggregate <- PercentageFeatureSet(experiment.aggregate, "Pecam1|Pf4", col.name = "percent_plat")

#Check to make sure all QC data has been added to the Seurat object
head(experiment.aggregate[[]])

#Plot QC features as VlnPlots
QC_feats <- c("nFeature_RNA", "nCount_RNA", "percent.mito")

#Combined violin plot of QC metrics before filtering
VlnPlot(
  experiment.aggregate,
  group.by="orig.ident",
  features = QC_feats,
  ncol = 3, pt.size = 0.1)

#Print out number of cells per sample
samplename=experiment.aggregate@meta.data[["orig.ident"]]
table(samplename)

#Define age group (or other experimental group) and add as meta-data
age = rep("YOUNG",length(samplename))
age[samplename %in% c("5", "6", "7", "8")] = "OLD"
names(age) = rownames(experiment.aggregate@meta.data)

#Add age as meta data
experiment.aggregate <- AddMetaData(
  object = experiment.aggregate,
  metadata = age,
  col.name = "age")

#do.call("cbind", tapply(experiment.aggregate@meta.data[["nFeature_RNA"]],experiment.aggregate@meta.data[["orig.ident"]],quantile,probs=seq(0,1,0.05)))
RidgePlot(experiment.aggregate, features="nFeature_RNA", group.by="orig.ident")

round(do.call("cbind", tapply(experiment.aggregate@meta.data[["percent.mito"]],experiment.aggregate@meta.data[["orig.ident"]],quantile,probs=seq(0,1,0.05))), digits = 3)
RidgePlot(experiment.aggregate, features="percent.mito", group.by="orig.ident")

do.call("cbind", tapply(experiment.aggregate@meta.data[["nCount_RNA"]],experiment.aggregate@meta.data[["orig.ident"]],quantile,probs=seq(0,1,0.05)))
RidgePlot(experiment.aggregate, features="nCount_RNA", group.by="orig.ident")


Idents(experiment.aggregate) <- "orig.ident"


#Detection-based filtering
#Here we will only consider cells with at least 200 detected genes and genes need to be expressed in at least 3 cells. 
#Please note that those values are highly dependent on the library preparation method used.

selected_c <- WhichCells(experiment.aggregate, expression = nFeature_RNA > 200)
selected_f <- rownames(experiment.aggregate)[Matrix::rowSums(experiment.aggregate) > 3]

#Do not filter on number of features yet, as high number of features can indicate doublets

data.filt <- subset(experiment.aggregate, features = selected_f, cells = selected_c)
dim(data.filt)
ncol(data.filt)


# Compute the relative expression of each gene per cell Use sparse matrix
# operations, if your dataset is large, doing matrix devisions the regular way
# will take a very long time.
par(mar = c(4, 8, 2, 1))
C <- data.filt@assays$RNA@counts
C <- Matrix::t(Matrix::t(C)/Matrix::colSums(C)) * 100
most_expressed <- order(apply(C, 1, median), decreasing = T)[20:1]
boxplot(as.matrix(t(C[most_expressed, ])), cex = 0.1, las = 1, xlab = "% total count per cell",
    col = (scales::hue_pal())(20)[20:1], horizontal = TRUE)
	
	
#Filter based on mitochondrial and ribosomal transcripts
data.filt <- subset(data.filt, subset = percent.mito < 0.25 & percent_ribo > 5)
dim(data.filt)

# Filter MALAT1
data.filt <- data.filt[!grepl("Malat1", rownames(data.filt)), ]
data.filt <- data.filt[!grepl("Gm42418", rownames(data.filt)), ]
data.filt <- data.filt[!grepl("Gm26917", rownames(data.filt)), ]
data.filt <- data.filt[!grepl("Ay036118", rownames(data.filt)), ]

#Filter Ribossomal gene (optional if that is a problem on your data) 
data.filt<- data.filt[ ! grepl('^Rp[SL]', rownames(data.filt)), ]


#Combined violin plot of QC metrics after filtering
VlnPlot(
  data.filt,
  features = c("nFeature_RNA", "nCount_RNA","percent.mito", "percent_ribo", "percent_hb", "percent_plat"),
  ncol = 2, pt.size = 0.1)

#Print out number of surviving cells per sample after filtering
table(data.filt$orig.ident)

#Calculate cell-cycle scores
data.filt = NormalizeData(data.filt)
#install.packages("stringr")
library(stringr)
s.genes <- str_to_title(cc.genes$s.genes)
g2m.genes <- str_to_title(cc.genes$g2m.genes)
data.filt <- CellCycleScoring(object = data.filt, g2m.features = g2m.genes,
    s.features = s.genes)
VlnPlot(data.filt, features = c("S.Score", "G2M.Score"), group.by = "orig.ident",
    ncol = 4, pt.size = 0.1)
	
head(data.filt[[]])
Idents(data.filt) <- "orig.ident"


#Load DoubletFinder to remove doublets
#remotes::install_github('chris-mcginnis-ucsf/DoubletFinder') 
library(DoubletFinder)
suppressMessages(require(DoubletFinder))

#Filters out Doublets

data.filt = FindVariableFeatures(data.filt, verbose = F)
#data.filt = ScaleData(data.filt, vars.to.regress = c("nFeature_RNA", "percent.mito", "S.Score", "G2M.Score"), verbose = F)
data.filt = ScaleData(data.filt, vars.to.regress = c("nFeature_RNA", "percent.mito"), verbose = F)

#Determine dimensionality of data
data.filt <- RunPCA(data.filt, features = VariableFeatures(object = data.filt))
#DimHeatmap(data.filt, dims = 1:15, cells = 500, balanced = TRUE)
#data.filt <- JackStraw(data.filt, num.replicate = 100)
#data.filt <- ScoreJackStraw(data.filt, dims = 1:20)
#JackStrawPlot(data.filt, dims = 1:20)


data.filt = RunPCA(data.filt, verbose = F, npcs = 20)
data.filt = RunUMAP(data.filt, dims = 1:20, verbose = F)

#Number of expected doublets based on 10X loaded and expected recovery
nExp <- round(ncol(data.filt) * 0.05)  # expect 5% 

#DoubletFinder parameter optimization
# Optimal pK is the max of the bomodality coefficent (BCmvn) distribution
#This is a lengthy process, so once optimized comment this out
#sweep.res <- paramSweep_v3(data.filt)
#sweep.stats <- summarizeSweep(sweep.res, GT = FALSE)
#bcmvn <- find.pK(sweep.stats)
#barplot(bcmvn$BCmetric, names.arg = bcmvn$pK, las=2)

#Run Doublet Finder to identify doublets
library(DoubletFinder)
data.filt <- doubletFinder_v3(data.filt, pN = 0.25, pK = 0.01, nExp = nExp, PCs = 1:10)
dim(data.filt)
DF.name = colnames(data.filt@meta.data)[grepl("DF.classification", colnames(data.filt@meta.data))]

cowplot::plot_grid(ncol = 2, DimPlot(data.filt, group.by = "orig.ident") + NoAxes(),
        DimPlot(data.filt, group.by = DF.name) + NoAxes())

VlnPlot(data.filt, features = "nFeature_RNA", group.by = DF.name, pt.size = 0.1)

data.filt = data.filt[, data.filt@meta.data[, DF.name] == "Singlet"]
dim(data.filt)

#Visualize the UMAP clustering by age, perform integration only if there appears to be batch effects
DimPlot(data.filt,group.by="age", label=TRUE)
 
  
#No integration is needed for this data set, comment out
#experiment.aggregate<-SplitObject(data.filt, split.by = "age")
#experiment.aggregate <- lapply(X = experiment.aggregate, FUN = function(x) {
#     x <- NormalizeData(x)
#     x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
# })

#features <- SelectIntegrationFeatures(object.list = experiment.aggregate)
#experiment.aggregate <- lapply(X = experiment.aggregate, FUN = function(x) {
#     x <- ScaleData(x, features = features, verbose = FALSE)
#     x <- RunPCA(x, features = features, verbose = FALSE)
# })

#age.anchors <- FindIntegrationAnchors(object.list = experiment.aggregate, anchor.features = features, reduction = "rpca")
#age.combined <- IntegrateData(anchorset = age.anchors)
#DefaultAssay(age.combined) <- "integrated"


age.combined <- FindNeighbors(data.filt, reduction = "pca", dims = 1:20)

#Clustree can be used to determine the optimal resolution when finding clusters (Zappia et al., 2018)
#install.packages("clustree")
#library(clustree)
# Select a range of resolutions
#resolution.range <- seq(from = 0, to = 0.4, by = 0.05)
# Find clusters using a range of resolutions
#age.combined <- Seurat::FindClusters(object = object, resolution = resolution.range)
#clustree(age.combined)

#Cluster samples 
age.combined <- FindClusters(age.combined, resolution = 0.2)
DimPlot(age.combined,split.by="age", label=TRUE)


#Immune Cells
immune <-subset(age.combined, idents=c("5","6","9","13"))
immune <- ScaleData(immune, verbose = FALSE)
immune <- RunPCA(immune, npcs = 30, verbose = FALSE)
immune <- RunUMAP(immune, reduction = "pca", dims = 1:10)
immune <- FindNeighbors(immune, reduction = "pca", dims = 1:10)
immune <- FindClusters(immune, resolution = 0.3)
DimPlot(immune)
DimPlot(immune, split.by = "age")


#Stroma Cells
stroma <-subset(age.combined, idents=c("0","2","3","8"))
stroma <- ScaleData(stroma, verbose = FALSE)
stroma <- RunPCA(stroma, npcs = 30, verbose = FALSE)
stroma <- RunUMAP(stroma, reduction = "pca", dims = 1:5)
stroma <- FindNeighbors(stroma, reduction = "pca", dims = 1:5)
stroma <- FindClusters(stroma, resolution = 0.2)
DimPlot(stroma)
DimPlot(stroma, split.by = "age")


#Granulosa/Luteal/Oocyte Cells
granulosa <-subset(age.combined, idents=c("1","7","11","12"))
granulosa <- ScaleData(granulosa, verbose = FALSE)
granulosa <- RunPCA(granulosa, npcs = 30, verbose = FALSE)
granulosa <- RunUMAP(granulosa, reduction = "pca", dims = 1:5)
granulosa <- FindNeighbors(granulosa, reduction = "pca", dims = 1:5)
granulosa <- FindClusters(granulosa, resolution = 0.2)
DimPlot(granulosa)
DimPlot(granulosa, split.by = "age")


#Endothelium/Epithelium Cells
thelium <-subset(age.combined, idents=c("4","10","15"))
thelium <- ScaleData(thelium, verbose = FALSE)
thelium <- RunPCA(thelium, npcs = 30, verbose = FALSE)
thelium <- RunUMAP(thelium, reduction = "pca", dims = 1:5)
thelium <- FindNeighbors(thelium, reduction = "pca", dims = 1:5)
thelium <- FindClusters(thelium, resolution = 0.05)
DimPlot(thelium)
DimPlot(thelium, split.by = "age")

#Remove contaminating oviduct cells
age.combined<-subset(age.combined, idents=c("0","1","2","3","4","5","6","7","8","9","10","11","12","13","15"))

#Renames numbered (sub)clusters into identified cell type
age.combined <- RenameIdents(object = age.combined, `0` = "Stroma A", `1` = "Granulosa A", `2` = "Stroma B", '3' = "Theca", `4` = "Endothelium", `5` = "Phagocytes A", `6` = "T-Lymphocytes", '7' = "Granulosa B", `8` = "Stroma C", `9` = "Phagocytes B", `10` = "Epithelium A", '11' = "Oocytes", `12` = "Luteal", `13` = "B-Lymphocytes", `15` = "Epithelium B")
age.combined[["cluster_names"]] <- Idents(object = age.combined)

immune <- RenameIdents(object = immune, `0` = "Unidentified Macrophages", `1` = "Tissue Macrophages", `2` = "CD8+ T-cells", '3' = "B-cells", `4` = "Natural Killer Cells", `5` = "Dendritic Cells A", `6` = "CD4+ T-cells", '7' = "Neutrophils/Monocytes", `8` = "Innate Lymphoid Cells 3", `9` = "Mitotic Immune Cells", `10` = "Dendritic Cells B", '11' = "Innate Lymphoid Cells 2", `12` = "CD300e+ Macrophages")
immune[["cluster_names"]] <- Idents(object = immune)

stroma <- RenameIdents(object = stroma, `0` = "GC Markers", `1` = "Fibroblast-like", `2` = "Theca", '3' = "Early Theca", `4` = "Pericytes", `5` = "Smooth Muscle")
stroma[["cluster_names"]] <- Idents(object = stroma)

granulosa <- RenameIdents(object = granulosa, `0` = "Antral GC", `1` = "Atretic GC", `2` = "Preantral GC", '3' = "Mitotic GC", `4` = "Oocytes", `5` = "Luteal")
granulosa[["cluster_names"]] <- Idents(object = granulosa)

thelium <- RenameIdents(object = thelium, `0` = "Vascular Endothelium", `1` = "GC Markers", `2` = "Epithelium", '3' = "Lymphatic Endothelium")
thelium[["cluster_names"]] <- Idents(object = thelium)

#ShinyCell Application Creation
#seu = readRDS("readySeu_rset.rds")
#scConf = createConfig(seu)
#makeShinyApp(seu, scConf, gene.mapping = TRUE, shiny.title = "ShinyCell - Ovary seqRNA") 


#CellChat Object Creation
#OLD CellChat
Idents(age.combined) <- "age"
age.old <- subset(age.combined, idents=c("OLD"))
Idents(age.old) <- "cluster.names"
cellchat.old <- createCellChat(age.old)
CellChatDB <- CellChatDB.mouse
#cellchat <- aggregateNet(cellchat)
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling")
cellchat.old@DB <- CellChatDB.use
cellchat.old <- subsetData(cellchat.old)
#future::plan("multiprocess", workers = 4)
cellchat.old <- identifyOverExpressedGenes(cellchat.old)
cellchat.old <- identifyOverExpressedInteractions(cellchat.old)
cellchat.old <- computeCommunProb(cellchat.old)
cellchat.old <- filterCommunication(cellchat.old, min.cells = 10)
cellchat.old <- computeCommunProbPathway(cellchat.old)
cellchat.old <- aggregateNet(cellchat.old)
groupSize <- as.numeric(table(cellchat.old@idents))
par(mfrow = c(1,2), xpd=TRUE)

#YOUNG CellChat
Idents(age.combined) <- "age"
age.young <- subset(age.combined, idents=c("YOUNG"))
Idents(age.young) <- "cluster.names"
cellchat.young <- createCellChat(age.young)
CellChatDB <- CellChatDB.mouse
#cellchat <- aggregateNet(cellchat)
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling")
cellchat.young@DB <- CellChatDB.use
cellchat.young <- subsetData(cellchat.young)
#future::plan("multiprocess", workers = 4)
cellchat.young <- identifyOverExpressedGenes(cellchat.young)
cellchat.young <- identifyOverExpressedInteractions(cellchat.young)
cellchat.young <- computeCommunProb(cellchat.young)
cellchat.young <- filterCommunication(cellchat.young, min.cells = 10)
cellchat.young <- computeCommunProbPathway(cellchat.young)
cellchat.young <- aggregateNet(cellchat.young)
groupSize <- as.numeric(table(cellchat.young@idents))
par(mfrow = c(1,2), xpd=TRUE)




#Figure Recreation Code for RStudio figures

#Figure 1A
DimPlot(age.combined, labels = TRUE)

#Figure 1B
VlnPlot(age.combined, features = "(Insert Gene Here)")

#Figure S1A
VlnPlot(experiment.aggregate, group.by="orig.ident", features = QC_feats, ncol = 3, pt.size = 0)
VlnPlot(data.filt, group.by="orig.ident", features = QC_feats, ncol = 3, pt.size = 0)

#Figure S1C
FeaturePlot(age.combined, features = "(Insert Gene Here)", order = TRUE)

#Figure 2B
DimPlot(age.combined, split.by = "age")

#Figure 3A
immuneclusters <-subset(age.combined, idents=c("Phagocytes A","T-Lymphocytes","Phagocytes B","B-Lymphocytes"))
DimPlot(immuneclusters)

#Figure 3B
DimPlot(immune)

#Figure 3C
DotPlot(immune, features = c("Ptprc", "C1qb", "C1qa", "Apoe", "Mafb", "Fcgr1", "Axl", "Cd28", "Tbx21", "Lck", "Igkc", "Cd79a", "Cd79b", "Ncr1", "Klrb1b", "Klrb1c", "Cd209a", "Flt3", "Clec9a", "Lef1", "Tcf7", "Ccr7", "F10", "Clec4e", "Hp", "Rorc", "Il18r1", "Zbtb16", "Cenpe", "Top2a", "Ccna2", "H2-Aa", "H2-Eb1", "Cd74", "Il1rl1", "Areg", "Gata3", "Pparg", "Cd300e", "Fcgr4"), cols = c("blue", "red"), scale.by = 1)

#Figure 3E
FeaturePlot(immune, features = "Arg1", split.by = "age", order = TRUE)

#Figure 4A
stromaclusters <- subset(age.combined, idents=c("Stroma A","Stroma B","Theca","Stroma C"))
DimPlot(stromaclusters)

#Figure 4B
DimPlot(stroma)

#Figure 4C
DotPlot(stroma, features = c("Inhba", "Bex4", "Nr5a2", "Dcn", "Mgp", "Lum", "Cyp11a1", "Mgarp", "Cyp17a1", "Enpep", "Ptch1", "Hhip", "Rgs5", "Notch3", "Ebf1", "Tagln", "Myh11", "Actg2"),  cols = c("blue", "red"), scale.by = 1)

#Figure S4A
DotPlot(age.combined, features = c("Cdkn1a", "Cdkn2a", "Cdkn2d", "Serpine1", "Glb1", "Casp8", "Il1b"))

#Figure S4B
DotPlot(immune, features = c("Cdkn1a", "Cdkn2a", "Cdkn2d", "Serpine1", "Glb1", "Casp8", "Il1b"))

#Figure 5A
fibroblast_like <- subset(stroma, idents=c("Fibroblast-like"))
VlnPlot(fibroblast_like, features = c("Col1a1", "Col1a2", "Col3a1", "Col4a1", "Col6a1"), ncol = 3, pt.size = 0, split.by = "age")

#Figure 6A
granulosaclusters <- subset(age.combined, idents=c("Granulosa A","Granulosa B","Oocytes","Luteal"))
DimPlot(granulosaclusters)

#Figure 6B
DimPlot(granulosa)

#Figure 6C
DotPlot(stroma, features = c("Inhbb", "Fst", "Gja1", "Itih5", "Cald1", "Pik3ip1", "Igfbp5", "Gatm", "Col18a1", "Top2a", "Cenpa", "Racgap1", "Zp3", "Ooep", "Gdf9", "Cyp11a1", "Ptgfr", "Onecut2"),  cols = c("blue", "red"), scale.by = 1)

#Figure 7B
pathways.show <- "CCL"
cellchat.young@netP$pathways
par(mfrow=c(1,1))
netVisual_aggregate(cellchat.young, signaling = pathways.show, layout = "chord")

#Figure 7C
pathways.show <- "CCL"
cellchat.old@netP$pathways
par(mfrow=c(1,1))
netVisual_aggregate(cellchat.old, signaling = pathways.show, layout = "chord")

#Figure 7D
pathways.show <- "AMH"
cellchat.young@netP$pathways
par(mfrow=c(1,1))
netVisual_aggregate(cellchat.young, signaling = pathways.show, layout = "chord")

#Figure 7E
pathways.show <- "AMH"
cellchat.old@netP$pathways
par(mfrow=c(1,1))
netVisual_aggregate(cellchat.old, signaling = pathways.show, layout = "chord")

#Figure 8A
theliumclusters <- subset(age.combined, idents=c("Endothelium","Epithelium A","Epithelium B"))
DimPlot(theliumclusters)

#Figure 8B
DimPlot(thelium)

#Figure 8C
DotPlot(thelium, features = c("Flt1", "Cyyr1", "Mmrn2", "Inha", "Inhba", "Hsd3b1", "Lgals7", "Upk1b", "Krt18", "Mmrn1", "Ccl21a", "Lyve1"),  cols = c("blue", "red"), scale.by = 1)

#Figure 8G
vascularendo <- subset(thelium, idents=c("Vascular Endothelium"))
DotPlot(vascularendo, features = c("Cdkn1a", "Cdkn2a", "Cdkn2d", "Casp8", "Il1b", "Gilb1", "Serpine1", "Il6"), split.by = "age", scale.by = 1)



